##
(* EBNF *)
letter_lowercase = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
letter_uppercase = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
identifier_characters = "_"
character = "\x00" | "\x01" | "\x02" | ... | "\xFF"
comma = ","
lparen = "("
rparen = ")"
lbrace = "{"
rbrace = "}"
str_quote = '"'

string = str_quote { character - str_quote } str_quote
identifier = letter_lowercase | letter_uppercase | identifier_characters { letter_lowercase | letter_uppercase | identifier_characters | digit }
number = digit | { digit }
func_call = identifier lparen ( expression { comma expression } ) ? rparen
func_body = lbrace ( expression { comma expression } ) ? rbrace
expression = string | identifier | number | func_call | func_body
program = START expression ? { comma expression } END

PARSER
print("Hello, World")
  print("Hello, World"):program => SequenceNode([Value(FuncCall, FuncCall("print", [Value(StrConstant, StrConstant("Hello, World!"))]))])
    print("Hello, World"):expression => Value(FuncCall, FuncCall("print", [Value(StrConstant, StrConstant("Hello, World!"))]))
      print("Hello, World"):func_call => FuncCall("print", [Value(StrConstant, StrConstant("Hello, World!"))])
        print:identifier
        (:lparen
        "Hello, World":expression => Value(StrConstant, StrConstant("Hello, World!"))
          "Hello, World":string => StrConstant("Hello, World!")
            ":str_quote
            Hello, World:{character-str_quote}
            ":str_quote
        ):rparen

EXECUTOR
SequenceNode([Value(FuncCall, FuncCall("print", [Value(StrConstant, StrConstant("Hello, World!"))]))])
for val in SequenceNode0 {
    if val != FuncCall { continue }
    let func = (FuncCall)val;
    call_func(func.name, func.args)
}
call_func => {
    if func.is_native {
        func.native_func(func.args)
    } else {
        todo!()
    }
}
##
